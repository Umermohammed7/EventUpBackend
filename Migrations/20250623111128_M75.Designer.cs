// <auto-generated />
using System;
using BackendEventUp.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BackendEventUp.Migrations
{
    [DbContext(typeof(Myctx))]
    [Migration("20250623111128_M75")]
    partial class M75
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AssociationUtilisateur", b =>
                {
                    b.Property<int>("AssociationAdhereid_association")
                        .HasColumnType("int");

                    b.Property<int>("Membresid_utilisateur")
                        .HasColumnType("int");

                    b.HasKey("AssociationAdhereid_association", "Membresid_utilisateur");

                    b.HasIndex("Membresid_utilisateur");

                    b.ToTable("Adherer", (string)null);
                });

            modelBuilder.Entity("AssociationUtilisateur1", b =>
                {
                    b.Property<int>("Abonnesid_utilisateur")
                        .HasColumnType("int");

                    b.Property<int>("AssociationAbonneid_association")
                        .HasColumnType("int");

                    b.HasKey("Abonnesid_utilisateur", "AssociationAbonneid_association");

                    b.HasIndex("AssociationAbonneid_association");

                    b.ToTable("Abonner", (string)null);
                });

            modelBuilder.Entity("BackendEventUp.Models.Association", b =>
                {
                    b.Property<int>("id_association")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id_association"));

                    b.Property<string>("email_association")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("fondateurId")
                        .HasColumnType("int");

                    b.Property<string>("lienDon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("logo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nom_association")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("rib")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("tag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id_association");

                    b.HasIndex("fondateurId");

                    b.ToTable("Associations");
                });

            modelBuilder.Entity("BackendEventUp.Models.Evenement", b =>
                {
                    b.Property<int>("id_evenement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id_evenement"));

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nom_evenement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id_evenement");

                    b.ToTable("Evenements");
                });

            modelBuilder.Entity("BackendEventUp.Models.Intermediaire.Alerter", b =>
                {
                    b.Property<int>("UtilisateurId")
                        .HasColumnType("int");

                    b.Property<int>("EvenementId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAlerte")
                        .HasColumnType("datetime2");

                    b.Property<string>("MessageAlerte")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusAlerte")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UtilisateurId", "EvenementId");

                    b.HasIndex("EvenementId");

                    b.ToTable("Alerter");
                });

            modelBuilder.Entity("BackendEventUp.Models.Intermediaire.Organiser", b =>
                {
                    b.Property<int>("AssociationId")
                        .HasColumnType("int");

                    b.Property<int>("EvenementId")
                        .HasColumnType("int");

                    b.Property<string>("AdresseEvenement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateEvenement")
                        .HasColumnType("datetime2");

                    b.HasKey("AssociationId", "EvenementId");

                    b.HasIndex("EvenementId");

                    b.ToTable("Organiser");
                });

            modelBuilder.Entity("BackendEventUp.Models.Role", b =>
                {
                    b.Property<int>("id_role")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id_role"));

                    b.Property<string>("nom_role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id_role");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("BackendEventUp.Models.Utilisateur", b =>
                {
                    b.Property<int>("id_utilisateur")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id_utilisateur"));

                    b.Property<string>("email_utilisateur")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("mdp_utilisateur")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nom_utilisateur")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("prenom_utilisateur")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id_utilisateur");

                    b.ToTable("Utilisateurs");
                });

            modelBuilder.Entity("RoleUtilisateur", b =>
                {
                    b.Property<int>("listRoleid_role")
                        .HasColumnType("int");

                    b.Property<int>("listUtilisateurid_utilisateur")
                        .HasColumnType("int");

                    b.HasKey("listRoleid_role", "listUtilisateurid_utilisateur");

                    b.HasIndex("listUtilisateurid_utilisateur");

                    b.ToTable("Permettre", (string)null);
                });

            modelBuilder.Entity("AssociationUtilisateur", b =>
                {
                    b.HasOne("BackendEventUp.Models.Association", null)
                        .WithMany()
                        .HasForeignKey("AssociationAdhereid_association")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendEventUp.Models.Utilisateur", null)
                        .WithMany()
                        .HasForeignKey("Membresid_utilisateur")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AssociationUtilisateur1", b =>
                {
                    b.HasOne("BackendEventUp.Models.Utilisateur", null)
                        .WithMany()
                        .HasForeignKey("Abonnesid_utilisateur")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendEventUp.Models.Association", null)
                        .WithMany()
                        .HasForeignKey("AssociationAbonneid_association")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BackendEventUp.Models.Association", b =>
                {
                    b.HasOne("BackendEventUp.Models.Utilisateur", "fondateur")
                        .WithMany("AssociationsCreees")
                        .HasForeignKey("fondateurId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("fondateur");
                });

            modelBuilder.Entity("BackendEventUp.Models.Intermediaire.Alerter", b =>
                {
                    b.HasOne("BackendEventUp.Models.Evenement", "Evenement")
                        .WithMany("Utilisateurs")
                        .HasForeignKey("EvenementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendEventUp.Models.Utilisateur", "Utilisateur")
                        .WithMany("Evenements")
                        .HasForeignKey("UtilisateurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evenement");

                    b.Navigation("Utilisateur");
                });

            modelBuilder.Entity("BackendEventUp.Models.Intermediaire.Organiser", b =>
                {
                    b.HasOne("BackendEventUp.Models.Association", "Association")
                        .WithMany("Organiser")
                        .HasForeignKey("AssociationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendEventUp.Models.Evenement", "Evenement")
                        .WithMany("Organiser")
                        .HasForeignKey("EvenementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Association");

                    b.Navigation("Evenement");
                });

            modelBuilder.Entity("RoleUtilisateur", b =>
                {
                    b.HasOne("BackendEventUp.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("listRoleid_role")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendEventUp.Models.Utilisateur", null)
                        .WithMany()
                        .HasForeignKey("listUtilisateurid_utilisateur")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BackendEventUp.Models.Association", b =>
                {
                    b.Navigation("Organiser");
                });

            modelBuilder.Entity("BackendEventUp.Models.Evenement", b =>
                {
                    b.Navigation("Organiser");

                    b.Navigation("Utilisateurs");
                });

            modelBuilder.Entity("BackendEventUp.Models.Utilisateur", b =>
                {
                    b.Navigation("AssociationsCreees");

                    b.Navigation("Evenements");
                });
#pragma warning restore 612, 618
        }
    }
}
